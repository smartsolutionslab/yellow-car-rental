@page "/vehicles"

@using SmartSolutionsLab.YellowCarRent.Frontend.ApiClient
@using SmartSolutionsLab.YellowCarRental.Application.Contracts.Station
@using SmartSolutionsLab.YellowCarRental.Application.Contracts.Vehicle
@using SmartSolutionsLab.YellowCarRental.Domain
@using DateRange = MudBlazor.DateRange
@inject VehicleApiClient VehicleApi
@inject StationApiClient StationApi

<PageTitle>Fahrzeugsuche</PageTitle>

<MudPaper Class="p-4" Elevation="2">
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudDateRangePicker Label="Zeitraum" @bind-DateRange="_selectedRange" />
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudSelect T="StationData" Label="Station" @bind-Value="_selectedStation">
                @foreach (var station in _stations)
                {
                    <MudSelectItem Value="@station">@station</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudSelect T="VehicleCategory" Label="Kategorie" @bind-Value="_selectedCategory">
                @foreach (var category in VehicleCategory.All)
                {
                    <MudSelectItem Value="category">@category.Name</MudSelectItem>                    
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4"
               OnClick="SearchVehicles">
        🔍 Fahrzeuge suchen
    </MudButton>
</MudPaper>

@if (_vehicles is not null && _vehicles.Any())
{
    <MudTable Items="_vehicles" Class="mt-6" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Fahrzeug</MudTh>
            <MudTh>Kategorie</MudTh>
            <MudTh>Sitze</MudTh>
            <MudTh>Kraftstoff</MudTh>
            <MudTh>Getriebe</MudTh>
            <MudTh>Preis/Tag</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Fahrzeug">@context.Name</MudTd>
            <MudTd DataLabel="Kategorie">@context.Category</MudTd>
            <MudTd DataLabel="Sitze">@context.Seats</MudTd>
            <MudTd DataLabel="Kraftstoff">@context.Fuel</MudTd>
            <MudTd DataLabel="Getriebe">@context.Transmission</MudTd>
            <MudTd DataLabel="Preis/Tag">@($"{context.PricePerDay:C}")</MudTd>

        </RowTemplate>
    </MudTable>
}

@code {
    private DateRange? _selectedRange;
    private StationData? _selectedStation;
    private VehicleCategory? _selectedCategory;
    private List<StationData> _stations = [];

    //TODO: refactor back to VihicleVm private List<VehicleVm>? _vehicles;
    private List<VehicleData>? _vehicles = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var stationResponse = await StationApi.ListStationsAsync();
        _stations = stationResponse.Stations.ToList();
    }

    private async Task SearchVehicles()
    {
        if (_selectedRange is null) return;

        var response = await VehicleApi.SearchVehiclesAsync(
            _selectedRange.Start.GetValueOrDefault(DateTime.Today),
            _selectedRange.End.GetValueOrDefault(DateTime.Today.AddDays(7)),
            _selectedStation?.Id,
            _selectedCategory?.Key
        );

        _vehicles = response.Vehicles;
    }

    //TODO move to vm
    private decimal CalcPrice(decimal pricePerDay)
    {
        if (_selectedRange is null) return pricePerDay;
        var days = (_selectedRange.End - _selectedRange.Start)?.Days ?? 1;
        return days * pricePerDay;
    }
}

