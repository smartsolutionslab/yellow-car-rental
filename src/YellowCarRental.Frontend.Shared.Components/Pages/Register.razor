@page "/register"
@using SmartSolutionsLab.YellowCarRent.Frontend.ApiClient
@using SmartSolutionsLab.YellowCarRental.Application.Contracts.Customer
@using SmartSolutionsLab.YellowCarRental.Domain
@inject CustomerApiClient CustomerApi
@inject NavigationManager Nav

<MudPaper Class="p-6 max-w-xl mx-auto" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">📝 Registrierung</MudText>

    <MudForm @ref="_form" Model="_formModel">
        <MudSelect @bind-Value="_formModel.Salutation" Label="Anrede">
            @foreach(var salutation in Salutation.All )
            {
                <MudSelectItem T="Salutation" Value="@salutation">@salutation</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="_formModel.FirstName" Label="Vorname" Required="true" />
        <MudTextField @bind-Value="_formModel.LastName" Label="Nachname" Required="true" />

        <MudDatePicker @bind-Date="_formModel.BirthDate" Label="Geburtsdatum" />
        <MudTextField @bind-Value="_formModel.Email" Label="EMail" Required="true" InputType="InputType.Email" />
        
        <MudTextField @bind-Value="_formModel.Street" Label="Straße" Required="true" />
        <MudTextField @bind-Value="_formModel.HouseNumber" Label="Hausnummer" Required="true" />
        <MudTextField @bind-Value="_formModel.Zip" Label="PLZ" Required="true" />
        <MudTextField @bind-Value="_formModel.City" Label="Ort" Required="true" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="RegisterCustomer">
            ➕ Registrieren
        </MudButton>
    </MudForm>

    @if (!string.IsNullOrEmpty(_message))
    {
        <MudText Color="Color.Success" Class="mt-3">@_message</MudText>
    }
</MudPaper>

@code {
    private MudForm? _form;
    private CustomerFormModel _formModel = new();
    private string _message = "";

    private async Task RegisterCustomer()
    {
        if (_formModel is null)
        {
            throw new InvalidOperationException("Customer is not set!");
        }

        var created = await CustomerApi.RegisterCustomerAsync(new RegisterCustomerCommand(
            CustomerName.From(_formModel.Salutation, FirstName.From(_formModel.FirstName), LastName.From(_formModel.LastName)),
            BirthDate.From(DateOnly.FromDateTime(_formModel.BirthDate.GetValueOrDefault(DateTime.MinValue))),
            CustomerAddress.From(_formModel.Street, _formModel.HouseNumber, _formModel.Zip, _formModel.City),
            new EMail(_formModel.Email)));
        
        _message = $"✅ Kunde erfolgreich angelegt! ID: {created.Id}";
        
        Nav.NavigateTo("/booking");
    
    }
}
